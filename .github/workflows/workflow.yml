name: Glycemia SE Huangjie
on:
  pull_request:
    branches: [ "*" ]
  push:
    branches: [ "*" ]
jobs:
  project-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up the Maven dependencies caching
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Maven dependencies
        run: mvn install
        env:
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_URL: ${{ secrets.DB_URL }}
      - name: Upload JAR as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Maven Jar File
          path: target/${{ env.JAR_NAME }}
      - name: Run tests
        run: mvn --batch-mode --update-snapshots verify
        env:
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_URL: ${{ secrets.DB_URL }}
  docker-build:
    runs-on: ubuntu-latest
    needs:
      - project-build
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Dashboard to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_TAG01 }}
          cache-from: |
            type=gha,src=~/
          cache-to: |
            type=gha,src=~/
          build-args: |
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_URL=${{ secrets.DB_URL }}
          
  cleanup:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: 🗑 Delete deployment
        uses: strumwolf/delete-deployment-environment@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: SERVER_WITH_PUBLIC_IP
          onlyRemoveDeployments: true
  deploy:
    if: ${{ github.ref == 'refs/heads/deploy' }}
    runs-on: ubuntu-latest
    environment: SERVER_WITH_PUBLIC_IP
    needs:
      - docker-build
      - cleanup
    steps:
      - uses: actions/checkout@v3
      - name: Deploy the application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: | 
            # 获取本地镜像列表
            existing_image=$(docker images -q ${{ vars.DOCKERHUB_IMAGE }}:${{ vars.DOCKERHUB_TAG }})

            # 如果镜像不存在，则拉取最新的镜像
            if [ -z "$existing_image" ]; then
              echo "Pulling the latest Docker image..."
              docker pull ${{ vars.DOCKERHUB_IMAGE }}:${{ vars.DOCKERHUB_TAG }}
            else
              echo "Using the existing Docker image."
            fi  
            echo "Stop the container"
            docker stop ${{ vars.CONTAINER_NAME }}
            echo "Remove the container"
            docker rm ${{ vars.CONTAINER_NAME }}
            echo "Run the new container"
            docker run -d --rm -p ${{ vars.HOST_PORT }}:${{ vars.CONTAINER_PORT }}  --name ${{ vars.CONTAINER_NAME }} ${{ vars.DOCKERHUB_IMAGE }}:${{ vars.DOCKERHUB_TAG }}
            echo "Remove the file under backup directories"
            rm -rf $JAR_BACKUP
            echo "copy jar from docker to server"
            docker cp ${{ vars.CONTAINER_NAME }}:/app/target/backend-0.0.1-SNAPSHOT.jar $JAR_BACKUP
            echo "Sync the master"
            rsync -av --update $JAR_BACKUP $JAR_HOME
            echo "Kill existing tomcat process"
            killtomcat.sh
            echo "Run tomcat(background)"
            nohup java -jar $JAR_HOME/backend-0.0.1-SNAPSHOT.jar > tomcat.log 2>&1 &
            echo "Show tomcat logs"
            cat tomcat.log
